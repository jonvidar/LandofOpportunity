<?php

/**
 * @file
 * Features for admin section.
 */

/**
* Implements hook_menu()
* 
*/
function landofopp_rmv_editor_menu() {
  $items = array();
  
  $items['rmv/%file/json'] = array(
    'title' => 'Check file to related for RMV',
    'page arguments' => array(1),
    'page callback' => 'landofopp_rmv_editor_check_file',
    'access arguments' => array('access content overview'),
    'type' => MENU_CALLBACK ,
  );
  
  $items['rmv/video/%file/json'] = array(
    'title' => 'Get video for file',
    'page arguments' => array(2),
    'page callback' => 'landofopp_rmv_editor_get_video_preview',
    'access arguments' => array('access content overview'),
    'type' => MENU_CALLBACK ,
  );
  
  $items['rmv/preview-video'] = array(
    'title' => 'Preview video',
    'page callback' => 'landofopp_rmv_editor_preview_video',
    'access arguments' => array('access content overview'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'landofopp_rmv_editor.pages.inc'
  );
  
  $items['admin/content/feedback'] = array(
    'title' => 'Feedback',
    'page callback' => 'webform_feedback_results',
    'access callback' => 'landofopp_rmv_editor_access',
    'access arguments' => array('access all webform results'),
    'file' => 'landofopp_rmv_editor.pages.inc',
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );
  
  $items['admin/content/file-add'] = array(
    'title' => 'Add file',
    'page callback' => 'client_file_add',
    'access callback' => 'landofopp_rmv_editor_access',
    'access arguments' => array('administer files'),
    'file' => 'landofopp_rmv_editor.pages.inc',
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );
  
  
  $items['node/%node/iframe'] = array(
    'title' => 'Get video iframe',
    'page arguments' => array(1, 3, 4),
    'page callback' => 'landofopp_rmv_editor_get_embed_code',
    'access arguments' => array('access content overview'),
    'type' => MENU_CALLBACK ,
  );

  return $items;
}
/**
* Implements hook_theme()
* 
*/
function landofopp_rmv_editor_theme() {
  $items = array();
  // preview template for player on node edit page
  $items['rmv_preview'] = array(
    'template' => 'tpl/preview',
    'variables' => array(),
  );
  
  return $items;
}
/**
* Ajax callback, return array of content for new RMV content
* @param $file drupal file object
* 
*/
function landofopp_rmv_editor_check_file($file) {
  $results = array('nid' => 0, 'title' => '');
  if ($file->type == 'video') {
    $nid = db_query("SELECT entity_id FROM {field_data_field_video} WHERE field_video_fid = :fid", array(':fid' => $file->fid))->fetchField();
    if ($nid) {
      $node = node_load($nid);
      $results['nid'] = $nid;
      $results['title'] = $node->title;
      $body = loo_get_field_value($node, 'body', 'safe_value');
      $results['what'] = strip_tags($body);
      
      if (!empty($node->field_tags)) {
        $tids = $tags = array();
        foreach ($node->field_tags['und'] as $item) {
          $tids[] = $item['tid'];
        }
        $terms = taxonomy_term_load_multiple($tids);
        foreach ($terms as $term) {
          $tags[] = $term->name;
        }
        $results['tags'] = implode(', ', $tags);
      }
    }
  }
  
  drupal_json_output($results);
  
}
/**
* Implements hook_element_info_alter()
* 
*/
function landofopp_rmv_editor_element_info_alter(&$variables) {
  $variables['media']['#process'][] = 'landofopp_rmv_editor_media_element_process';
}
/**
*  change setting for media field element
* @param $element
* @param $form_state
* @param $form
* 
*/
function landofopp_rmv_editor_media_element_process(&$element, &$form_state, $form) {
  // field media type in field collection trigger 
  if ($element['#field_name'] == 'field_media_type') {
    // rewrite media.js
    $element['#attached']['js'][0] = drupal_get_path('module', 'landofopp_rmv_editor') . '/js/media.js';
    // add checkbox
    $element['alt'] = array(
      '#title' => t('This video is not a Rich Media Video, do you want to create a Rich Media Video node for adding additional content to it?'),
      '#type' => 'checkbox',
      '#default_value' => FALSE,
      '#weight' => 200,
    );
  }
  // video field for RMV node
  if ($element['#field_name'] == 'field_video') {
    // rewrite media.js
    $element['#attached']['js'][0] = drupal_get_path('module', 'landofopp_rmv_editor') . '/js/media.js';
    
    $path_popcorn = drupal_get_path('theme', 'landofopportunity') . '/js/lib/min/popcorn-complete.min.js';
    $element['#attached']['js'][] = $path_popcorn;
    $element['#attached']['js'][] = drupal_get_path('module', 'landofopp_rmv_editor') . '/js/player.js';
    
    
    $fid = 0;
    $preview_video = '';
    
    if (!empty($element['#file'])) {
      $preview_video = landofopp_rmv_editor_get_video_preview($element['#file']);
      $fid = $element['#file']->fid;
    }
    
    // popcorn preview video
    $element['preview_video'] = array(
      '#prefix' => '<div class="preview_video" data-id="' . $fid . '">',
      '#suffix' => '</div>',
      '#markup' => $preview_video,
      '#weight' => 100,
    );
    
    $element['alt'] = array(
      '#title' => t('Current time'),
      '#type' => 'textfield',
      '#attributes' => array('id' => 'edit-current-time'),
      '#weight' => 101,
    );
    
  }
  
  if ($element['#field_name'] == 'field_trigger_image') {
    // rewrite media.js
    $element['#attached']['js'][0] = drupal_get_path('module', 'landofopp_rmv_editor') . '/js/media.js';
  }
  
  return $element;
}
/**
* return html output for video preview
* @param  $file
* 
*/
function landofopp_rmv_editor_get_video_preview($file) {
  $output = '';
  if ($file->type == 'video') {
    switch ($file->filemime) {
      case 'video/archive':
        $options = array(
          'width' => '640',
          'height' => '362', 
          'controls' => FALSE,
          'autoplay' => FALSE,
          'controls_hide' => FALSE,
          'loop' => FALSE,
        );
        $output = theme('media_archive_video', array('uri' => $file->uri, 'options' => $options));
        $output = str_replace('<video', '<video id="preview-video-' . $file->fid . '"', $output);
      break;
      case 'video/vimeo':
        $url = str_replace('vimeo://v/', 'http://vimeo.com/', $file->uri);
        $output = '<div id="preview-video-' . $file->fid . '" class="vimeo" data-url="' . $url . '"></div>';
      break;
      case 'video/youtube':
        $url = str_replace('youtube://v/', 'http://www.youtube.com/watch?v=', $file->uri);
        $output = '<div id="preview-video-' . $file->fid . '" class="youtube" data-url="' . $url . '"></div>';
      break;
    }
    
    $output = '<div class="wrapper-video">' . $output . '</div>';
  }
  
  if (!empty($_GET['is_ajax'])) {
    print $output;
    die();
  } 
  else {
    return $output;
  }
  
}
/**
* Implements hook_form_FORM_ID_alter().
* Form add/edit for  subpage node
* 
*/
function landofopp_rmv_editor_form_subpage_node_form_alter(&$form, &$form_state, $form_id) {
  // set default format on body
  if (empty($form['body']['und'][0]['#format'])) {
    $form['body']['und'][0]['#format'] = 'full_html';
  }
  // set default format on field right column
  if (empty($form['field_right_column']['und'][0]['#format'])) {
    $form['field_right_column']['und'][0]['#format'] = 'full_html';
  }
  
  // hide fieldset filter format
  if (!user_access('use text format php_code')) {
    $css = '#edit-body-und-0-format,#edit-field-right-column-und-0-format{display:none;}';
    drupal_add_css($css, 'inline');
  }
  
}

/**
* Implements hook_form_FORM_ID_alter().
* Form add/edit for RMV node
* 
*/
function landofopp_rmv_editor_form_rich_media_node_form_alter(&$form, &$form_state, $form_id) {
  $lang = $form['field_trigger']['#language'];
  // field time for new trigger
  $form['new_time'] = array(
    '#type' => 'textfield',
    '#title' => 'New time',
    '#prefix' => '<div id="add-new-time">',
    '#suffix' => '</div>',
    '#weight' => 8,
  );
  if (!empty($_POST['new_time'])) {
    $time = $_POST['new_time'];
  }
  
  // add css and js files
  $form['#attached']['css'] = array(
    0 => drupal_get_path('module', 'landofopp_rmv_editor') . '/css/rmv.css',
    1 => drupal_get_path('theme', 'landofopportunity') . '/css/player.css',
    2 => drupal_get_path('theme', 'landofopportunity') . '/css/jquery.fancybox.css',
    3 => drupal_get_path('theme', 'landofopportunity') . '/css/chardinjs.css',
  );
  $form['#attached']['js'] = array(
    0 => drupal_get_path('module', 'landofopp_rmv_editor') . '/js/rmv.js',
    1 => drupal_get_path('theme', 'landofopportunity') . '/js/lib/jquery.fancybox.js',
    2 => drupal_get_path('theme', 'landofopportunity') . '/js/lib/jquery.cycle2.js',
    3 => drupal_get_path('theme', 'landofopportunity') . '/js/lib/chardinjs.js',
    4 => drupal_get_path('theme', 'landofopportunity') . '/js/looplayer.js',
    
  );
  
  foreach ($form['field_trigger']{$lang} as $key => $trigger) {
    if (is_numeric($key)) {
      $last = $key;
      $title = '';
      
      $form['field_trigger']['und'][$key]['field_rmv']['und']['#access'] = FALSE;
      if (!empty($form['field_trigger']['und'][$key]['field_trigger_title']['und'][0]['value']['#default_value'])) {
        $title = $form['field_trigger']['und'][$key]['field_trigger_title']['und'][0]['value']['#default_value'];
      }
      
      if ($title) $form['field_trigger']['und'][$key]['#title'] = $title;
      
      $form['field_trigger']['und'][$key]['field_rmv']['#prefix'] = '<span class="or">OR</span>';
      
    }
  }
  
  // add description below preview video
  $form['field_trigger_description'] = array(
    '#markup' => '<div class="desc"><p>To add a Trigger, please use the video preview above.</p></div>',
    '#weight' => 6,
  );
  
  if (!empty($time)) {
    // set time for new trigger
    $form['field_trigger']['und'][$last]['field_time']['und'][0]['value']['#default_value'] = $time;
  }
  
  
  // hide first empty trigger
  if ($last == 0) {
    $field_trigger_title = $form['field_trigger']['und'][$last]['field_trigger_title']['und'][0]['value']['#default_value'];
    $field_time = $form['field_trigger']['und'][$last]['field_time']['und'][0]['value']['#default_value'];
    $field_what = $form['field_trigger']['und'][$last]['field_what']['und'][0]['#default_value'];
    $field_why = $form['field_trigger']['und'][$last]['field_why']['und'][0]['#default_value'];

    if (empty($field_trigger_title) && empty($field_time) && empty($field_what) && empty($field_why)) {
      $field_time = $form['field_trigger']['#attributes']['class'][] = 'hidden';
    }
  }
  
  unset($form['options']['sticky']);
  
  // add ability iframe 
  if (!empty($form['nid']) && !empty($form['nid']['#value'])) {
    $node = node_load($form['nid']['#value']);
    $width = 640;
    $height = 480;
    
    $form['embed_video'] = array(
      '#type' => 'fieldset',
      '#title' => 'Embed video',
      '#collapsible' => 1,
      '#weight' => 15,
    );
    
    $form['embed_video']['node_nid'] = array(
      '#type' => 'hidden',
      '#attributes' => array('id' => 'node-nid'),
      '#value' => $node->nid,
    );
    
    $form['embed_video']['width'] = array(
      '#type' => 'textfield',
      '#title' => 'Width',
      '#size' => 5,
      '#suffix' => '<span class="suffix">px</span>',
      '#default_value' => $width,
    );
    
    $form['embed_video']['height'] = array(
      '#type' => 'textfield',
      '#title' => 'Height',
      '#size' => 5,
      '#suffix' => '<span class="suffix">px</span>',
      '#default_value' => $height,
    );
    
    $form['embed_video']['update_code'] = array(
      '#type' => 'button',
      
      '#value' => 'Update Code',
    );
    
    $code = landofopp_rmv_editor_get_embed_code($node, $width, $height);
    
    $form['embed_video']['code'] = array(
      '#type' => 'textarea',
      '#title' => 'Embed code',
      '#default_value' => $code,
    );
  }
}
/**return html output iframe depends from width
* @param $node
* @param $width
* @param $heght
* 
*/
function landofopp_rmv_editor_get_embed_code($node, $width, $heght) {
  if ($width >=640) {
    $output = theme('iframe_code', array('node' => $node, 'width' => $width, 'height' => $heght));
  } 
  else {
    $output = theme('embed_code', array('node' => $node, 'width' => $width, 'height' => $heght));
  }
  if (!empty($_REQUEST['is_ajax'])) {
    print $output;
    die();
  }
  return $output;
}
/**
* Implements hook_form_alter().
* 
*/
function landofopp_rmv_editor_form_alter(&$form, &$form_state, $form_id) {
  // add destination=admin/content to every node form
  if (strpos($form_id, 'node_form') !== FALSE ) {
    if (empty($_GET['destination'])) {
      $form['#action'] = $form['#action'] . '?destination=admin/content';
    }
  }
  // remove twitter signin from login form
  if ($form_id === 'user_login') {
    unset($form['twitter_signin']);
  }
  
}
/**
* Implements hook_form_FORM_ID_alter().
* FORM_ID views_exposed_form
* 
*/
function landofopp_rmv_editor_form_views_exposed_form_alter(&$form, &$form_state) {
  if ($form_state['view']->name == 'media_default' && $form_state['view']->current_display == 'media_browser_1') {
    $action = urldecode($_GET['q']);
    $options = drupal_parse_url($action);
    if (!empty($_GET['types'])) {
      if (count($_GET['types']) == 1 && (!empty($_GET['types']['video'])) && $_GET['types']['video'] == 'video') {
        // show only video 
        $form['#attributes']['class'][] = 'form-field-video';
        $form['type']['#access'] = FALSE;
      } 
      else {
        // add new options to file type 
        $form['type']['#options']['rmv'] = 'Rich Media Video';
      }
    }
    
    
  }
}
/**
* Implements hook_views_query_alter().
* 
*/

function landofopp_rmv_editor_views_query_alter(&$view, &$query) {
  if ($view->name == 'media_default' && $view->current_display == 'media_browser_1') {
    $type = @$_GET['type'];
    if ($type == 'rmv') {
      // show only video which related with RVM
      $fids = landofopp_rmv_editor_get_fids_from_node_rmv();
      $query->where[1]['conditions'][] = array(
        'field' => 'file_managed.fid',
        'value' => $fids,
        'operator' => 'in',
      );
      
      $query->where[1]['conditions'][1]['value'][0] = 'video';
    }
    
    
    if (!empty($_GET['types'])) {
      if (count($_GET['types']) == 1 && (!empty($_GET['types']['video'])) && $_GET['types']['video'] == 'video') {
        // show only video which not related with RVM
        $fids = landofopp_rmv_editor_get_fids_from_node_rmv();
        $query->where[1]['conditions'][] = array(
          'field' => 'file_managed.fid',
          'value' => $fids,
          'operator' => 'not in',
        );
        $query->where[1]['conditions'][] = array(
          'field' => 'file_managed.filemime',
          'value' => 'video/flickr',
          'operator' => '!=',
        );
      }
    }
    
    
    
    if ($type == 'video') {
      // show only video which not related with RVM
      $fids = landofopp_rmv_editor_get_fids_from_node_rmv();
      $query->where[1]['conditions'][] = array(
        'field' => 'file_managed.fid',
        'value' => $fids,
        'operator' => 'not in',
      );
      $query->where[1]['conditions'][] = array(
        'field' => 'file_managed.filemime',
        'value' => 'video/flickr',
        'operator' => '!=',
      );
    }
    
    if ($type == 'image') {
      // show only image and video/flickr
      $filemimes = array('image/gif', 'image/png', 'image/jpeg', 'video/flickr');
      $query->where[1]['conditions'][1]['value'] = array('image', 'video');
      $query->where[1]['conditions'][] = array(
        'field' => 'file_managed.filemime',
        'value' => $filemimes,
        'operator' => 'in',
      );
    }
  }
}
/**
* get all video related  with RMV
* 
*/
function landofopp_rmv_editor_get_fids_from_node_rmv() {
  
  $query = db_select('field_data_field_video', 'video');
  $query->fields('video', array('field_video_fid'));
  $query->distinct();
  $fids = $query->execute()->fetchCol();

  return $fids;
}

/**
* get RMV node with video image
* 
*/
function landofopp_rmv_editor_get_rmv_thubmnail($fids) {
  
  $query = db_select('node', 'n');
  $query->fields('n', array('title', 'nid'));
  $query->leftJoin('field_data_field_video', 'video', 'video.entity_id = n.nid');
  $query->leftJoin('field_data_field_video_image', 'image', 'image.entity_id = n.nid');
  $query->leftJoin('file_usage', 'file', 'file.id = image.field_video_image_fid');
  $query->addField('file', 'fid', 'preview_fid');
  $query->addField('video', 'field_video_fid', 'video_fid');
  $query->condition('video.field_video_fid', $fids, 'IN');
  $query->where("((file.module IS NULL) OR (file.module = 'imagefield_crop'))");
  
  $results = $query->execute()->fetchAll();


  return $results;
}
/**
* phptemplate_preprocess_media_views_view_media_browser
* @param undefined $vars
* change media preview video file to  RVM preview image and title
* 
*/
function landofopp_rmv_editor_preprocess_media_views_view_media_browser(&$vars) {
  
  $nids = array();
  $fids = array();
  foreach ($vars['view']->result as $item) {
    $fids[] = $item->fid;
  }
  
  $nodes = landofopp_rmv_editor_get_rmv_thubmnail($fids);
  
  foreach ($vars['rows'] as $key => $row) {
    $fid = $row->fid;
    $items = array();
    foreach ($nodes as $node) {
      if ($node->video_fid == $fid) {
        $items[] = $node;
      }
    }
    
    $count = count($items);
    if ($count >= 1) {
      $item = current($items);
      //change thumbnail to RMV preview image
      if (!empty($item->preview_fid)) {
        $image = file_load($item->preview_fid);
        $title = $item->title;
        $variables = array(
          'style_name' => 'medium',
          'path' => $image->uri,
          'width' => $image->metadata['width'],
          'height' => $image->metadata['height'],
        );
        $preview = '<div  title="' . $title . '" class="media-item" data-nid="' . $item->nid . '" data-fid="' . $fid . '">';
        $preview .= '<div class="media-thumbnail">' . theme_image_style($variables);
        $preview .= '<div class="label-wrapper"><label class="media-filename">' . $title . '</label></div></div></div>';
        $vars['rows']{$key}->preview = $preview;
      } 
    else {
        // change only title
        $title = $item->title;
        $filename = $vars['rows']{$key}->filename;
        $preview = $vars['rows']{$key}->preview;
        $vars['rows']{$key}->preview = str_replace('<label class="media-filename">' . $filename, '<label class="media-filename">' . $title, $preview);
      }
    }
    
    
    $preview = $vars['rows']{$key}->preview;
    preg_match('/<label class="media-filename">(.*?)<\/label>/', $preview, $matches);
    // truncate title
    if (!empty($matches)) {
      $title = $matches[1];
      $truncate_title =  truncate_utf8($title, 38, TRUE, TRUE, 1);
      $vars['rows']{$key}->preview = str_replace('<label class="media-filename">' . $title, '<label class="media-filename">' . $truncate_title, $preview);
    }
    
  }
  
}

/**
* Implements hook_entity_presave().
* create new RMV node from trigger field
* @param $entity
* @param  $type
* 
*/
function landofopp_rmv_editor_entity_presave($entity, $type) {
  if ($type == 'field_collection_item' && $entity->field_name == 'field_trigger') {
      if (!empty($entity->field_media_type['und'])) {
      $file = $entity->field_media_type['und'][0];
      if (!empty($file['alt']) && !empty($file['fid'])) {
        $params = array();
        $params['title'] = landofopp_get_field_value($entity, 'field_trigger_title');
        $params['what'] = landofopp_get_field_value($entity, 'field_what');
        $params['tags'] = @$entity->field_tags['und'];
        $params['fid'] = $file['fid'];
        landofopp_rmv_editor_add_rmv_node($params);
        unset($entity->field_media_type['und'][0]['alt']);
      }
    }
    
  }
}
/**
* create new RMV node
* @param $params
* 
*/
function landofopp_rmv_editor_add_rmv_node($params = array()) {
  if (empty($params)) return;
  global $user;
  $file = file_load($params['fid']);
  
  // create node rich media
  $node = new stdClass();
  $node->type = 'rich_media';
  node_object_prepare($node);
  $node->uid = $user->uid;
  $node->language = LANGUAGE_NONE;
  // title
  if (!empty($params['title'])) {
    $node->title = $params['title'];
  }
  else {
    $node->title = $file->filename;
  }
  
  if (!empty($params['what'])) {
    $node->body['und'][0] = array(
      'value' => $params['what']
    );
  }
  
  if (!empty($params['tags'])) {
    foreach ($params['tags'] as $tag) {
      $node->field_tags['und'][] = array(
        'tid' => $tag['tid'],
      );
    }
  }
  
  // video
  $node->field_video = array();
  $node->field_video[LANGUAGE_NONE][0] = array(
    'fid' => $file->fid,
    'title' => NULL,
    'data' => NULL
  );
  
  //save node
  node_save($node);
}
/**
* Implements hook_menu_alter().
* @param undefined $items
* 
*/
function landofopp_rmv_editor_menu_alter(&$items) {
  // client admin user don't have access to webform results only for feedback webform results.
  $items['admin/content/webform']['access arguments'][0] = 'administer file types';
  $items['admin/content/node']['title'] = t('All Content');
  
  // basic user don't have access to reorder category
  $items['admin/sort/dig-deeper']['access arguments'][0][1][0] = 'administer nodes';
  
}
/**
* Implements hook_node_access();
* @param $node
* @param $op
* @param $account
* add ability to basic user edit content of partners
*/
function landofopp_rmv_editor_node_access($node, $op, $account) {
  $arg2 = arg(2);
  $author = $user_full = new stdClass();
  if (in_array('basic user', $account->roles) && ($arg2 == 'edit' || $arg2 =='delete')) {
    
    if (!empty($node->uid)) $author = user_load($node->uid);
    
    if (!empty($account->uid)) $user_full = user_load($account->uid);
    
    if (!empty($author) && !empty($user_full)) {
      $pnid_user = landofopp_get_field_value($user_full, 'field_user_partner', 'target_id');
      $pnid_author = landofopp_get_field_value($author, 'field_user_partner', 'target_id');
    
      if (!empty($pnid_user) && $pnid_author == $pnid_user) return NODE_ACCESS_ALLOW;
    }
    
  }
  
}
/**
* Implements hook_media_browser_plugins_alter();
* @param $plugins
* 
*/
function landofopp_rmv_editor_media_browser_plugins_alter(&$plugins) {
  if (!empty($plugins['upload'])) {
    $plugins['upload']['#weight'] = 1;
  }
  
}

/**
* Implements hook_form_FORM_ID_alter().
* Commment overview page
* 
*/

function landofopp_rmv_editor_form_comment_admin_overview_alter(&$form, &$form_state, $form_id) {
  // remove link from field title, author, posted_in
  $options = @$form['comments']['#options'];
  if ($options) {
    foreach ($options as $cid => $comment) {
      $author = '';
      $title = $comment['subject']['data']['#title'];
      $posted_in = $comment['posted_in']['data']['#title'];
      $pattern = "/<a (.*?)>(.*?)<\/a>/s";
      preg_match($pattern, $comment['author'], $matches);
      if (!empty($matches)) {
        $author = $matches[2];
      }
      
      $form['comments']['#options'][$cid]['subject'] = $title;
      $form['comments']['#options'][$cid]['posted_in'] = $posted_in;
      $form['comments']['#options'][$cid]['author'] = $author;
    }
  }
}
/**
* Implements hook_form_FORM_ID_alter().
* Content overview page
* 
*/

function landofopp_rmv_editor_form_node_admin_content_alter(&$form, &$form_state, $form_id) {
  // add edit/delete link to content when login like basic user
  unset($form['admin']['options']);
  global $user;
  if (!empty($form['admin']['nodes']['#rows']) && in_array('basic user', $user->roles)) {
    $destination = drupal_get_destination();
    $nodes = $form['admin']['nodes']['#rows'];
    foreach ($nodes as $nid => $row) {
      
      $operations = array();
      
      $operations['edit'] = array(
        'title' => t('edit'),
        'href' => 'node/' . $nid . '/edit',
        'query' => $destination,
      );

      $operations['delete'] = array(
        'title' => t('delete'),
        'href' => 'node/' . $nid . '/delete',
        'query' => $destination,
      );
      
      
      if (empty($row['operations'])) {
        $form['admin']['nodes']['#rows'][$nid]['operations'] = array(
          'data' => array(
            '#theme' => 'links__node_operations',
            '#links' => $operations,
            '#attributes' => array('class' => array('links', 'inline')),
          ),
        );
      }
    
      
    }
  }
}

/**
* Implements hook_form_FORM_ID_alter().
* FORM_ID = file_entity_add_upload
*/
function landofopp_rmv_editor_form_file_entity_add_upload_alter(&$form, &$form_state, $form_id) {
  if (!empty($form['upload']['#upload_validators']['file_validate_extensions'])) {
    $count = count($form['upload']['#upload_validators']['file_validate_extensions']);
    if ($count == 1) {
      $text = strtoupper($form['upload']['#upload_validators']['file_validate_extensions'][0]);
      $title = $form['upload']['#title'];
      $form['upload']['#title'] = str_replace('file', $text, $title);
    }
  }
}

/**
* Implements hook_query_node_access_alter().
* add for basic user content from partners
*/
function landofopp_rmv_editor_query_node_access_alter(QueryAlterableInterface $query) {
  global $user;
  
  if (in_array('basic user', $user->roles) && arg(0) == 'admin' && arg(1) == 'content') {
    
    $user_full = user_load($user->uid);
    $partner_nid = landofopp_get_field_value($user_full, 'field_user_partner', 'target_id');
    $nids = landofopp_rmv_editor_get_all_content($partner_nid);
    
    if ($nids) {
      $query->condition('n.nid', $nids , 'IN');
    }
    else {
      $query->condition('n.uid', $user->uid );
    }
    
  }
  
  
  return $query;
}
/**
* get all parnters content
* @param $partner_nid
* 
*/
function landofopp_rmv_editor_get_all_content($partner_nid) {
  if (empty($partner_nid)) return array();
  
  $nids = array();
  $select = db_select('node', 'n');
  $select->leftJoin('field_data_field_user_partner', 'p', 'p.entity_id = n.uid');
  $select->fields('n', array('nid'));
  $select->condition('p.field_user_partner_target_id', $partner_nid);
  $nids = $select->execute()->fetchCol();

  return $nids ? $nids : array();
}

/**
* function access to client admin links
* @param $string
* @param  $account
* 
*/
function landofopp_rmv_editor_access($string, $account = NULL) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }
  
  if ($account->uid == 1) {
    return FALSE;
  }
  
  return user_access($string);
}